
RoboHand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000004ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9f  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cc  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034e  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  9e:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Gesture_Rock>:
void Gesture_OpenHand(){
	Finger_Go_To(THUMB, OPEN);
	Finger_Go_To(INDEX, OPEN);
	Finger_Go_To(MIDDLE, OPEN);
	Finger_Go_To(RING, OPEN);
	Finger_Go_To(PINKY, OPEN);
  a6:	64 e6       	ldi	r22, 0x64	; 100
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  be:	64 e6       	ldi	r22, 0x64	; 100
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  ce:	08 95       	ret

000000d0 <Gesture_Fuck>:
  d0:	64 e6       	ldi	r22, 0x64	; 100
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  e8:	64 e6       	ldi	r22, 0x64	; 100
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  f0:	64 e6       	ldi	r22, 0x64	; 100
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
  f8:	08 95       	ret

000000fa <Gesture_Jumbo>:
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 102:	64 e6       	ldi	r22, 0x64	; 100
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 122:	08 95       	ret

00000124 <Gesture_Ok>:
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 12c:	64 e6       	ldi	r22, 0x64	; 100
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 13c:	64 e6       	ldi	r22, 0x64	; 100
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 144:	64 e6       	ldi	r22, 0x64	; 100
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 14c:	08 95       	ret

0000014e <Gesture_Fist>:
}

void Gesture_Fist(){
	Finger_Go_To(THUMB, CLOSE);
 14e:	64 e6       	ldi	r22, 0x64	; 100
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
	Finger_Go_To(INDEX, CLOSE);
 156:	64 e6       	ldi	r22, 0x64	; 100
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
	Finger_Go_To(MIDDLE, CLOSE);
 15e:	64 e6       	ldi	r22, 0x64	; 100
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
	Finger_Go_To(RING, CLOSE);
 166:	64 e6       	ldi	r22, 0x64	; 100
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
	Finger_Go_To(PINKY, CLOSE);
 16e:	64 e6       	ldi	r22, 0x64	; 100
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Finger_Go_To>
 176:	08 95       	ret

00000178 <Servo_Go_To>:
*/
void Wrist_Go_To(uint8_t percent_value){
	uint8_t position;

	position = WRIST_MIN + ((WRIST_MAX - WRIST_MIN) * percent_value / 100);
	Servo_Go_To(5, position);
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	89 f0       	breq	.+34     	; 0x19e <Servo_Go_To+0x26>
 17c:	28 f4       	brcc	.+10     	; 0x188 <Servo_Go_To+0x10>
 17e:	88 23       	and	r24, r24
 180:	49 f0       	breq	.+18     	; 0x194 <Servo_Go_To+0x1c>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	51 f0       	breq	.+20     	; 0x19a <Servo_Go_To+0x22>
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <Servo_Go_To+0x4a>
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	91 f0       	breq	.+36     	; 0x1b0 <Servo_Go_To+0x38>
 18c:	50 f0       	brcs	.+20     	; 0x1a2 <Servo_Go_To+0x2a>
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	b1 f0       	breq	.+44     	; 0x1be <Servo_Go_To+0x46>
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <Servo_Go_To+0x4a>
 194:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 198:	14 c0       	rjmp	.+40     	; 0x1c2 <Servo_Go_To+0x4a>
 19a:	68 bd       	out	0x28, r22	; 40
 19c:	12 c0       	rjmp	.+36     	; 0x1c2 <Servo_Go_To+0x4a>
 19e:	67 bd       	out	0x27, r22	; 39
 1a0:	10 c0       	rjmp	.+32     	; 0x1c2 <Servo_Go_To+0x4a>
 1a2:	26 2f       	mov	r18, r22
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1aa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <Servo_Go_To+0x4a>
 1b0:	26 2f       	mov	r18, r22
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1b8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Servo_Go_To+0x4a>
 1be:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1c2:	e8 2f       	mov	r30, r24
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ea 5f       	subi	r30, 0xFA	; 250
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	60 83       	st	Z, r22
 1cc:	08 95       	ret

000001ce <Finger_Go_To>:
 1ce:	28 2f       	mov	r18, r24
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	99 f1       	breq	.+102    	; 0x23a <Finger_Go_To+0x6c>
 1d4:	28 f4       	brcc	.+10     	; 0x1e0 <Finger_Go_To+0x12>
 1d6:	88 23       	and	r24, r24
 1d8:	51 f0       	breq	.+20     	; 0x1ee <Finger_Go_To+0x20>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	f9 f0       	breq	.+62     	; 0x21c <Finger_Go_To+0x4e>
 1de:	62 c0       	rjmp	.+196    	; 0x2a4 <Finger_Go_To+0xd6>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <Finger_Go_To+0x18>
 1e4:	41 c0       	rjmp	.+130    	; 0x268 <Finger_Go_To+0x9a>
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	09 f4       	brne	.+2      	; 0x1ec <Finger_Go_To+0x1e>
 1ea:	4d c0       	rjmp	.+154    	; 0x286 <Finger_Go_To+0xb8>
 1ec:	5b c0       	rjmp	.+182    	; 0x2a4 <Finger_Go_To+0xd6>
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	cb 01       	movw	r24, r22
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	86 1b       	sub	r24, r22
 204:	97 0b       	sbc	r25, r23
 206:	64 e6       	ldi	r22, 0x64	; 100
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 20e:	69 5f       	subi	r22, 0xF9	; 249
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	07 2e       	mov	r0, r23
 214:	00 0c       	add	r0, r0
 216:	88 0b       	sbc	r24, r24
 218:	99 0b       	sbc	r25, r25
 21a:	47 c0       	rjmp	.+142    	; 0x2aa <Finger_Go_To+0xdc>
 21c:	3d e0       	ldi	r19, 0x0D	; 13
 21e:	63 9f       	mul	r22, r19
 220:	c0 01       	movw	r24, r0
 222:	11 24       	eor	r1, r1
 224:	64 e6       	ldi	r22, 0x64	; 100
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 22c:	69 5f       	subi	r22, 0xF9	; 249
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	07 2e       	mov	r0, r23
 232:	00 0c       	add	r0, r0
 234:	88 0b       	sbc	r24, r24
 236:	99 0b       	sbc	r25, r25
 238:	38 c0       	rjmp	.+112    	; 0x2aa <Finger_Go_To+0xdc>
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	cb 01       	movw	r24, r22
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	86 1b       	sub	r24, r22
 250:	97 0b       	sbc	r25, r23
 252:	64 e6       	ldi	r22, 0x64	; 100
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 25a:	6a 5f       	subi	r22, 0xFA	; 250
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	21 c0       	rjmp	.+66     	; 0x2aa <Finger_Go_To+0xdc>
 268:	3f e0       	ldi	r19, 0x0F	; 15
 26a:	63 9f       	mul	r22, r19
 26c:	c0 01       	movw	r24, r0
 26e:	11 24       	eor	r1, r1
 270:	64 e6       	ldi	r22, 0x64	; 100
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 278:	69 5f       	subi	r22, 0xF9	; 249
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	07 2e       	mov	r0, r23
 27e:	00 0c       	add	r0, r0
 280:	88 0b       	sbc	r24, r24
 282:	99 0b       	sbc	r25, r25
 284:	12 c0       	rjmp	.+36     	; 0x2aa <Finger_Go_To+0xdc>
 286:	3d e0       	ldi	r19, 0x0D	; 13
 288:	63 9f       	mul	r22, r19
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	64 e6       	ldi	r22, 0x64	; 100
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 296:	68 5f       	subi	r22, 0xF8	; 248
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	07 2e       	mov	r0, r23
 29c:	00 0c       	add	r0, r0
 29e:	88 0b       	sbc	r24, r24
 2a0:	99 0b       	sbc	r25, r25
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <Finger_Go_To+0xdc>
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	cb 01       	movw	r24, r22
 2aa:	82 2f       	mov	r24, r18
 2ac:	0e 94 bc 00 	call	0x178	; 0x178 <Servo_Go_To>
 2b0:	08 95       	ret

000002b2 <Init_Servo_As_Output>:
*  Write bit to register to set servo as output
*
*  servo:		number of servo to set
*/
void Init_Servo_As_Output(uint8_t servo) {
	if(servo < 3){
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	48 f4       	brcc	.+18     	; 0x2c8 <Init_Servo_As_Output+0x16>
		DDRD |= servo_pin[servo];
 2b6:	9a b1       	in	r25, 0x0a	; 10
 2b8:	e8 2f       	mov	r30, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	89 2b       	or	r24, r25
 2c4:	8a b9       	out	0x0a, r24	; 10
 2c6:	08 95       	ret
		} else {
		DDRB |= servo_pin[servo];
 2c8:	94 b1       	in	r25, 0x04	; 4
 2ca:	e8 2f       	mov	r30, r24
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	e0 50       	subi	r30, 0x00	; 0
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	89 2b       	or	r24, r25
 2d6:	84 b9       	out	0x04, r24	; 4
 2d8:	08 95       	ret

000002da <Init_All_Servos_As_Outputs>:
/* Init_All_Servos_As_Outputs
*  Call Init_Servo_As_Output for all servos
*
*/
void Init_All_Servos_As_Outputs() {
	Init_Servo_As_Output(THUMB);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
	Init_Servo_As_Output(INDEX);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
	Init_Servo_As_Output(MIDDLE);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
	Init_Servo_As_Output(RING);
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
	Init_Servo_As_Output(PINKY);
 2f2:	84 e0       	ldi	r24, 0x04	; 4
 2f4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
	Init_Servo_As_Output(WRIST);
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Init_Servo_As_Output>
 2fe:	08 95       	ret

00000300 <Init_Timer0>:
*  Initialize Timer0 for Fast PWM on pins 5 and 6
*
*/
void Init_Timer0() {
	//		  tmr 8-bit					  | use pin 5    | use pin 6
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);
 300:	84 b5       	in	r24, 0x24	; 36
 302:	83 6a       	ori	r24, 0xA3	; 163
 304:	84 bd       	out	0x24, r24	; 36
	
	//		  prescaler 1024
	TCCR0B |= (1 << CS02) | (1 << CS00);						//16Mhz / (1024 * 255) = 61Hz
 306:	85 b5       	in	r24, 0x25	; 37
 308:	85 60       	ori	r24, 0x05	; 5
 30a:	85 bd       	out	0x25, r24	; 37
 30c:	08 95       	ret

0000030e <Init_Timer1>:
*  Initialize Timer1 for Fast PWM on pins 9 and 10
*
*/
void Init_Timer1() {
	//		  tmr 8-bit    | use pin 9     | use pin 10
	TCCR1A |= (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 30e:	e0 e8       	ldi	r30, 0x80	; 128
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	81 6a       	ori	r24, 0xA1	; 161
 316:	80 83       	st	Z, r24
	
	//		  tmr 8-bit    | prescaler 1024
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);			//16Mhz / (1024 * 255) = 61Hz
 318:	e1 e8       	ldi	r30, 0x81	; 129
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	8d 60       	ori	r24, 0x0D	; 13
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <Init_Timer2>:
*  Initialize Timer2 for Fast PWM on pins 11 and 3
*
*/
void Init_Timer2() {
	//		  tmr 8-bit					  | use pin 11    | use pin 3
	TCCR2A |= (1 << WGM21) | (1 << WGM20) | (1 << COM2A1) | (1 << COM2B1);
 324:	e0 eb       	ldi	r30, 0xB0	; 176
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	83 6a       	ori	r24, 0xA3	; 163
 32c:	80 83       	st	Z, r24
	
	//		  prescaler 1024
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);			//16Mhz / (1024 * 255) = 61Hz
 32e:	e1 eb       	ldi	r30, 0xB1	; 177
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	87 60       	ori	r24, 0x07	; 7
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <Init_All_Timers>:
/* Init_All_Timers
*  Call all functions initializing timers for Fast PWMs
*
*/
void Init_All_Timers() {
	Init_Timer0();
 33a:	0e 94 80 01 	call	0x300	; 0x300 <Init_Timer0>
	Init_Timer1();
 33e:	0e 94 87 01 	call	0x30e	; 0x30e <Init_Timer1>
	Init_Timer2();
 342:	0e 94 92 01 	call	0x324	; 0x324 <Init_Timer2>
 346:	08 95       	ret

00000348 <main>:
#include "servos_basic.h"
#include "gestures.h"

int main(void){
	
	Init_All_Servos_As_Outputs();
 348:	0e 94 6d 01 	call	0x2da	; 0x2da <Init_All_Servos_As_Outputs>
	Init_All_Timers();
 34c:	0e 94 9d 01 	call	0x33a	; 0x33a <Init_All_Timers>
	//Finger_Go_To(THUMB, 20);
	//Finger_Go_To(INDEX, 50);
	//Finger_Go_To(MIDDLE, THUMB_MIN);
	//Finger_Go_To(RING, THUMB_MIN);
	//Finger_Go_To(PINKY, THUMB_MIN);
	Gesture_Rock();
 350:	0e 94 53 00 	call	0xa6	; 0xa6 <Gesture_Rock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	8b e7       	ldi	r24, 0x7B	; 123
 358:	92 e9       	ldi	r25, 0x92	; 146
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x12>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x1c>
 364:	00 00       	nop
	_delay_ms(3000);
	Gesture_Fuck();
 366:	0e 94 68 00 	call	0xd0	; 0xd0 <Gesture_Fuck>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	8b e7       	ldi	r24, 0x7B	; 123
 36e:	92 e9       	ldi	r25, 0x92	; 146
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x28>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x32>
 37a:	00 00       	nop
	_delay_ms(3000);
	Gesture_Jumbo();
 37c:	0e 94 7d 00 	call	0xfa	; 0xfa <Gesture_Jumbo>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	8b e7       	ldi	r24, 0x7B	; 123
 384:	92 e9       	ldi	r25, 0x92	; 146
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x3e>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x48>
 390:	00 00       	nop
	_delay_ms(3000);
	Gesture_Fist();
 392:	0e 94 a7 00 	call	0x14e	; 0x14e <Gesture_Fist>
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	8b e7       	ldi	r24, 0x7B	; 123
 39a:	92 e9       	ldi	r25, 0x92	; 146
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x54>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x5e>
 3a6:	00 00       	nop
	_delay_ms(3000);
	Gesture_Ok();
 3a8:	0e 94 92 00 	call	0x124	; 0x124 <Gesture_Ok>
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	8b e7       	ldi	r24, 0x7B	; 123
 3b0:	92 e9       	ldi	r25, 0x92	; 146
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x6a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x74>
 3bc:	00 00       	nop
 3be:	ff cf       	rjmp	.-2      	; 0x3be <main+0x76>

000003c0 <__divmodhi4>:
 3c0:	97 fb       	bst	r25, 7
 3c2:	07 2e       	mov	r0, r23
 3c4:	16 f4       	brtc	.+4      	; 0x3ca <__divmodhi4+0xa>
 3c6:	00 94       	com	r0
 3c8:	07 d0       	rcall	.+14     	; 0x3d8 <__divmodhi4_neg1>
 3ca:	77 fd       	sbrc	r23, 7
 3cc:	09 d0       	rcall	.+18     	; 0x3e0 <__divmodhi4_neg2>
 3ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__udivmodhi4>
 3d2:	07 fc       	sbrc	r0, 7
 3d4:	05 d0       	rcall	.+10     	; 0x3e0 <__divmodhi4_neg2>
 3d6:	3e f4       	brtc	.+14     	; 0x3e6 <__divmodhi4_exit>

000003d8 <__divmodhi4_neg1>:
 3d8:	90 95       	com	r25
 3da:	81 95       	neg	r24
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__divmodhi4_neg2>:
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255

000003e6 <__divmodhi4_exit>:
 3e6:	08 95       	ret

000003e8 <__udivmodhi4>:
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	51 e1       	ldi	r21, 0x11	; 17
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__udivmodhi4_ep>

000003f0 <__udivmodhi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	a6 17       	cp	r26, r22
 3f6:	b7 07       	cpc	r27, r23
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__udivmodhi4_ep>
 3fa:	a6 1b       	sub	r26, r22
 3fc:	b7 0b       	sbc	r27, r23

000003fe <__udivmodhi4_ep>:
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	5a 95       	dec	r21
 404:	a9 f7       	brne	.-22     	; 0x3f0 <__udivmodhi4_loop>
 406:	80 95       	com	r24
 408:	90 95       	com	r25
 40a:	bc 01       	movw	r22, r24
 40c:	cd 01       	movw	r24, r26
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
