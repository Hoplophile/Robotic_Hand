
RoboHand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a58  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000410  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Servo_Go_To>:
*/
void Wrist_Go_To(uint8_t percent_value){
	uint8_t position;

	position = WRIST_MIN + ((WRIST_MAX - WRIST_MIN) * percent_value / 100);
	Servo_Go_To(5, position);
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	89 f0       	breq	.+34     	; 0xcc <Servo_Go_To+0x26>
  aa:	28 f4       	brcc	.+10     	; 0xb6 <Servo_Go_To+0x10>
  ac:	88 23       	and	r24, r24
  ae:	49 f0       	breq	.+18     	; 0xc2 <Servo_Go_To+0x1c>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	51 f0       	breq	.+20     	; 0xc8 <Servo_Go_To+0x22>
  b4:	1d c0       	rjmp	.+58     	; 0xf0 <Servo_Go_To+0x4a>
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	91 f0       	breq	.+36     	; 0xde <Servo_Go_To+0x38>
  ba:	50 f0       	brcs	.+20     	; 0xd0 <Servo_Go_To+0x2a>
  bc:	85 30       	cpi	r24, 0x05	; 5
  be:	b1 f0       	breq	.+44     	; 0xec <Servo_Go_To+0x46>
  c0:	17 c0       	rjmp	.+46     	; 0xf0 <Servo_Go_To+0x4a>
  c2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <Servo_Go_To+0x4a>
  c8:	67 bd       	out	0x27, r22	; 39
  ca:	12 c0       	rjmp	.+36     	; 0xf0 <Servo_Go_To+0x4a>
  cc:	68 bd       	out	0x28, r22	; 40
  ce:	10 c0       	rjmp	.+32     	; 0xf0 <Servo_Go_To+0x4a>
  d0:	26 2f       	mov	r18, r22
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <Servo_Go_To+0x4a>
  de:	26 2f       	mov	r18, r22
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  e6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Servo_Go_To+0x4a>
  ec:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  f0:	e8 2f       	mov	r30, r24
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ea 5f       	subi	r30, 0xFA	; 250
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	60 83       	st	Z, r22
  fa:	08 95       	ret

000000fc <Finger_Go_To>:
  fc:	28 2f       	mov	r18, r24
  fe:	88 23       	and	r24, r24
 100:	19 f0       	breq	.+6      	; 0x108 <Finger_Go_To+0xc>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	99 f0       	breq	.+38     	; 0x12c <Finger_Go_To+0x30>
 106:	1c c0       	rjmp	.+56     	; 0x140 <Finger_Go_To+0x44>
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	cb 01       	movw	r24, r22
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	86 1b       	sub	r24, r22
 11e:	97 0b       	sbc	r25, r23
 120:	64 e6       	ldi	r22, 0x64	; 100
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 09 01 	call	0x212	; 0x212 <__divmodhi4>
 128:	69 5f       	subi	r22, 0xF9	; 249
 12a:	0b c0       	rjmp	.+22     	; 0x142 <Finger_Go_To+0x46>
 12c:	3a ef       	ldi	r19, 0xFA	; 250
 12e:	36 03       	mulsu	r19, r22
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 09 01 	call	0x212	; 0x212 <__divmodhi4>
 13c:	6a 5f       	subi	r22, 0xFA	; 250
 13e:	01 c0       	rjmp	.+2      	; 0x142 <Finger_Go_To+0x46>
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 2f       	mov	r24, r18
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <Servo_Go_To>
 148:	08 95       	ret

0000014a <Init_Servo_As_Output>:
*  Write bit to register to set servo as output
*
*  servo:		number of servo to set
*/
void Init_Servo_As_Output(uint8_t servo) {
	if(servo < 3){
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	48 f4       	brcc	.+18     	; 0x160 <Init_Servo_As_Output+0x16>
		DDRD |= servo_pin[servo];
 14e:	9a b1       	in	r25, 0x0a	; 10
 150:	e8 2f       	mov	r30, r24
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	89 2b       	or	r24, r25
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	08 95       	ret
		} else {
		DDRB |= servo_pin[servo];
 160:	94 b1       	in	r25, 0x04	; 4
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	89 2b       	or	r24, r25
 16e:	84 b9       	out	0x04, r24	; 4
 170:	08 95       	ret

00000172 <Init_All_Servos_As_Outputs>:
/* Init_All_Servos_As_Outputs
*  Call Init_Servo_As_Output for all servos
*
*/
void Init_All_Servos_As_Outputs() {
	Init_Servo_As_Output(THUMB);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
	Init_Servo_As_Output(INDEX);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
	Init_Servo_As_Output(MIDDLE);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
	Init_Servo_As_Output(RING);
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
	Init_Servo_As_Output(PINKY);
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
	Init_Servo_As_Output(WRIST);
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Servo_As_Output>
 196:	08 95       	ret

00000198 <Init_Timer0>:
*  Initialize Timer0 for Fast PWM on pins 5 and 6
*
*/
void Init_Timer0() {
	//		  tmr 8-bit					  | use pin 5    | use pin 6
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);
 198:	84 b5       	in	r24, 0x24	; 36
 19a:	83 6a       	ori	r24, 0xA3	; 163
 19c:	84 bd       	out	0x24, r24	; 36
	
	//		  prescaler 1024
	TCCR0B |= (1 << CS02) | (1 << CS00);						//16Mhz / (1024 * 255) = 61Hz
 19e:	85 b5       	in	r24, 0x25	; 37
 1a0:	85 60       	ori	r24, 0x05	; 5
 1a2:	85 bd       	out	0x25, r24	; 37
 1a4:	08 95       	ret

000001a6 <Init_Timer1>:
*  Initialize Timer1 for Fast PWM on pins 9 and 10
*
*/
void Init_Timer1() {
	//		  tmr 8-bit    | use pin 9     | use pin 10
	TCCR1A |= (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 1a6:	e0 e8       	ldi	r30, 0x80	; 128
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 6a       	ori	r24, 0xA1	; 161
 1ae:	80 83       	st	Z, r24
	
	//		  tmr 8-bit    | prescaler 1024
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);			//16Mhz / (1024 * 255) = 61Hz
 1b0:	e1 e8       	ldi	r30, 0x81	; 129
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8d 60       	ori	r24, 0x0D	; 13
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <Init_Timer2>:
*  Initialize Timer2 for Fast PWM on pins 11 and 3
*
*/
void Init_Timer2() {
	//		  tmr 8-bit					  | use pin 11    | use pin 3
	TCCR2A |= (1 << WGM21) | (1 << WGM20) | (1 << COM2A1) | (1 << COM2B1);
 1bc:	e0 eb       	ldi	r30, 0xB0	; 176
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	83 6a       	ori	r24, 0xA3	; 163
 1c4:	80 83       	st	Z, r24
	
	//		  prescaler 1024
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);			//16Mhz / (1024 * 255) = 61Hz
 1c6:	e1 eb       	ldi	r30, 0xB1	; 177
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	87 60       	ori	r24, 0x07	; 7
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <Init_All_Timers>:
/* Init_All_Timers
*  Call all functions initializing timers for Fast PWMs
*
*/
void Init_All_Timers() {
	Init_Timer0();
 1d2:	0e 94 cc 00 	call	0x198	; 0x198 <Init_Timer0>
	Init_Timer1();
 1d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Init_Timer1>
	Init_Timer2();
 1da:	0e 94 de 00 	call	0x1bc	; 0x1bc <Init_Timer2>
 1de:	08 95       	ret

000001e0 <main>:

#include "servos_basic.h"

int main(void){
	
	Init_All_Servos_As_Outputs();
 1e0:	0e 94 b9 00 	call	0x172	; 0x172 <Init_All_Servos_As_Outputs>
	Init_All_Timers();
 1e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Init_All_Timers>
	
	Finger_Go_To(THUMB, THUMB_MIN);
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 7e 00 	call	0xfc	; 0xfc <Finger_Go_To>
	Finger_Go_To(INDEX, THUMB_MIN);
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 7e 00 	call	0xfc	; 0xfc <Finger_Go_To>
	Finger_Go_To(MIDDLE, THUMB_MIN);
 1f8:	67 e0       	ldi	r22, 0x07	; 7
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 7e 00 	call	0xfc	; 0xfc <Finger_Go_To>
	Finger_Go_To(RING, THUMB_MIN);
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	0e 94 7e 00 	call	0xfc	; 0xfc <Finger_Go_To>
	Finger_Go_To(PINKY, THUMB_MIN);
 208:	67 e0       	ldi	r22, 0x07	; 7
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	0e 94 7e 00 	call	0xfc	; 0xfc <Finger_Go_To>
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x30>

00000212 <__divmodhi4>:
 212:	97 fb       	bst	r25, 7
 214:	07 2e       	mov	r0, r23
 216:	16 f4       	brtc	.+4      	; 0x21c <__divmodhi4+0xa>
 218:	00 94       	com	r0
 21a:	07 d0       	rcall	.+14     	; 0x22a <__divmodhi4_neg1>
 21c:	77 fd       	sbrc	r23, 7
 21e:	09 d0       	rcall	.+18     	; 0x232 <__divmodhi4_neg2>
 220:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 224:	07 fc       	sbrc	r0, 7
 226:	05 d0       	rcall	.+10     	; 0x232 <__divmodhi4_neg2>
 228:	3e f4       	brtc	.+14     	; 0x238 <__divmodhi4_exit>

0000022a <__divmodhi4_neg1>:
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	08 95       	ret

00000232 <__divmodhi4_neg2>:
 232:	70 95       	com	r23
 234:	61 95       	neg	r22
 236:	7f 4f       	sbci	r23, 0xFF	; 255

00000238 <__divmodhi4_exit>:
 238:	08 95       	ret

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
